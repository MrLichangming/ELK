input {
    kafka {
        bootstrap_servers => "kafka1:9093, kafka2:9094, kafka3:9095"
        topics => ["lg_hall_all"]
        codec => json {
           charset => "UTF-8"
        }
        add_field => { "[@metadata][myid]" => "lg_hall_all" }
    }
    kafka {
        bootstrap_servers => "kafka1:9093, kafka2:9094, kafka3:9095"
        topics => ["lg_server_all"]
        codec => json {
           charset => "UTF-8"
        }
        add_field => { "[@metadata][myid]" => "lg_server_all" }
    }
    kafka {
        bootstrap_servers => "kafka1:9093, kafka2:9094, kafka3:9095"
        topics => ["lg_api_all"]
        codec => json {
           charset => "UTF-8"
        }
        add_field => { "[@metadata][myid]" => "lg_api_all" }
    }
    kafka {
        bootstrap_servers => "kafka1:9093, kafka2:9094, kafka3:9095"
        topics => ["lg_schedule_all"]
        codec => json {
           charset => "UTF-8"
        }
        add_field => { "[@metadata][myid]" => "lg_schedule_all" }
    }
    kafka {
        bootstrap_servers => "kafka1:9093, kafka2:9094, kafka3:9095"
        topics => ["lg_manager_all"]
        codec => json {
           charset => "UTF-8"
        }
        add_field => { "[@metadata][myid]" => "lg_manager_all" }
    }
    kafka {
        bootstrap_servers => "kafka1:9093, kafka2:9094, kafka3:9095"
        topics => ["lg_cache_all"]
        codec => json {
           charset => "UTF-8"
        }
        add_field => { "[@metadata][myid]" => "lg_cache_all" }
    }
  kafka{
        bootstrap_servers => "kafka1:9093, kafka2:9094, kafka3:9095"
        topics => ["lc_site_access"]
        consumer_threads => 5
        decorate_events => true
        codec => json {
          charset => "UTF-8"
  }
        add_field => {"[@metadata][myid]" => "lc_site_ac" }
  }

  kafka{
        bootstrap_servers => "kafka1:9093, kafka2:9094, kafka3:9095"
        topics => ["lg_core_access"]
        consumer_threads => 5
        decorate_events => true
        codec => json {
          charset => "UTF-8"
  }
        add_field => {"[@metadata][myid]" => "lg_core_access" }
  }
  kafka{
        bootstrap_servers => "kafka1:9093, kafka2:9094, kafka3:9095"
        topics => ["lc_site_error"]
        consumer_threads => 5
        decorate_events => true
        codec => json {
          charset => "UTF-8"
  }
        add_field => {"[@metadata][myid]" => "lc_site_error" }
  }
  kafka{
        bootstrap_servers => "kafka1:9093, kafka2:9094, kafka3:9095"
        topics => ["lg_core_error"]
        consumer_threads => 5
        decorate_events => true
        codec => json {
          charset => "UTF-8"
  }
        add_field => {"[@metadata][myid]" => "lg_core_error" }
  }
}

filter {
    if [@metadata][myid] == "lg_hall_all" {
     mutate {
            remove_field => "prospector"
            remove_field => "beat"      
            remove_field => "source"    
            remove_field => "input"
            remove_field => "offset"
            remove_field => "fields"
            remove_field => "host"
            remove_field => "@version"
    }
      if ( 'method":"HEAD' in [message] ) {
           drop {}
      }
     grok {
        match => {
            "message" => "%{TIMESTAMP_ISO8601:access_time} %{LOGLEVEL:loglevel} \[%{DATA:exception_info}\] %{USER:container_name} %{HOSTPORT:package_line} - %{MESSAGE:message}"
}
     pattern_definitions => {
            "MESSAGE" => "[\s\S]*"
    }
}
     date {
       match => [ "access_time","yyyy-MM-dd HH:mm:ss,SSS" ]
}
mutate {
       remove_field => ["access_time","[message][0]"]
   }
  }
    if [@metadata][myid] == "lg_server_all" {
     mutate {
            remove_field => "prospector"
            remove_field => "beat"
            remove_field => "source"
            remove_field => "input"
            remove_field => "offset"
            remove_field => "fields"
            remove_field => "host"
            remove_field => "@version"
    }
      if ( 'method":"HEAD' in [message] ) {
           drop {}
      }
     grok {
        match => {
            "message" => "%{URIHOST:month} %{TIME:time} %{LOGLEVEL:loglevel} \[%{DATA:exception_info}\] %{USER:container_name} %{HOSTPORT:package_line} - %{MESSAGE:message}"
} 
    pattern_definitions => {
            "MESSAGE" => "[\s\S]*"
    }
}
  }
    if [@metadata][myid] == "lg_api_all" {
     mutate {
            remove_field => "prospector"
            remove_field => "beat"
            remove_field => "source"
            remove_field => "input"
            remove_field => "offset"
            remove_field => "fields"
            remove_field => "host"
            remove_field => "@version"
    }
      if ( 'method":"HEAD' in [message] ) {
           drop {}
      }    
     grok {
        match => {
            "message" => "%{TIMESTAMP_ISO8601:access_time} %{LOGLEVEL:loglevel} \[%{DATA:exception_info}\] %{USER:container_name} %{HOSTPORT:package_line} - %{MESSAGE:message}"
}
     pattern_definitions => {
            "MESSAGE" => "[\s\S]*"
    }       
}
     date {
       match => [ "access_time","yyyy-MM-dd HH:mm:ss,SSS" ]
}      
mutate {
       remove_field => ["access_time","[message][0]"]
   }   
  }
    if [@metadata][myid] == "lg_schedule_all" {
     mutate {
            remove_field => "prospector"
            remove_field => "beat"
            remove_field => "source"
            remove_field => "input"
            remove_field => "offset"
            remove_field => "fields"
            remove_field => "host"
            remove_field => "@version"
    }       
      if ( 'method":"HEAD' in [message] ) {
           drop {}
      }    
     grok {
        match => {
            "message" => "%{URIHOST:month} %{TIME:time} %{LOGLEVEL:loglevel} \[%{DATA:exception_info}\] %{USER:container_name} %{HOSTPORT:package_line} - %{MESSAGE:message}"
}           
    pattern_definitions => {
            "MESSAGE" => "[\s\S]*"
    }       
  }  
 }
    if [@metadata][myid] == "lg_manager_all" {
     mutate {
            remove_field => "prospector"
            remove_field => "beat"
            remove_field => "source"
            remove_field => "input"
            remove_field => "offset"
            remove_field => "fields"
            remove_field => "host"
            remove_field => "@version"
    }
      if ( 'method":"HEAD' in [message] ) {
           drop {}
      }
     grok {
        match => {
            "message" => "%{TIMESTAMP_ISO8601:access_time} %{LOGLEVEL:loglevel} \[%{DATA:exception_info}\] %{USER:container_name} %{HOSTPORT:package_line} - %{MESSAGE:message}"
}
     pattern_definitions => {
            "MESSAGE" => "[\s\S]*"
    }
}
     date {
       match => [ "access_time","yyyy-MM-dd HH:mm:ss,SSS" ]
}
mutate {
       remove_field => ["access_time","[message][0]"]
   }
  }
    if [@metadata][myid] == "lg_cache_all" {
     mutate {
            remove_field => "prospector"
            remove_field => "beat"
            remove_field => "source"
            remove_field => "input"
            remove_field => "offset"
            remove_field => "fields"
            remove_field => "host"
            remove_field => "@version"
    }       
      if ( 'method":"HEAD' in [message] ) {
           drop {}
      }    
     grok {
        match => {
            "message" => "%{URIHOST:month} %{TIME:time} %{LOGLEVEL:loglevel} \[%{DATA:exception_info}\] %{USER:container_name} %{HOSTPORT:package_line} - %{MESSAGE:message}"
}           
    pattern_definitions => {
            "MESSAGE" => "[\s\S]*"
    }
  } 
 }
       if [@metadata][myid] == "lc_site_ac" {
    json{
        source => "message"
        remove_field => "prospector"
        remove_field => "beat"
        remove_field => "source"
        remove_field => "offset"
        remove_field => "fields"
        remove_field => "host"
        remove_field => "@version"
        remove_field => "message"
        remove_field => "input"
   }
     geoip {
     source => "http_x_forwarded_for"
     target => "geoip"
     database => "/opt/logstash/conf/GeoLite2-City.mmdb"
     add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
     add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
  }
       if [@metadata][myid] == "lg_core_access" {
    json{ 
        source => "message"}
    mutate {
        remove_field => "prospector"
        remove_field => "beat"
        remove_field => "source"
        remove_field => "offset"
        remove_field => "fields"
        remove_field => "host"
        remove_field => "@version"
        remove_field => "message"
        remove_field => "input"
   }
     geoip {
     source => "http_x_forwarded_for"
     target => "geoip"
     database => "/opt/logstash/conf/GeoLite2-City.mmdb"
     add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
     add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
  }
       if [@metadata][myid] == "lg_core_error" {
    mutate{
        remove_field => "prospector"
        remove_field => "beat"
        remove_field => "source"
        remove_field => "offset"
        remove_field => "fields"
        remove_field => "host"
        remove_field => "@version"
        remove_field => "input"
   }
  }
       if [@metadata][myid] == "lc_site_error" {
    mutate{
        remove_field => "prospector"
        remove_field => "beat"
        remove_field => "source"
        remove_field => "offset"
        remove_field => "fields"
        remove_field => "host"
        remove_field => "@version"
        remove_field => "input"
   }    
  }
}
output {
    if [@metadata][myid] == "lg_hall_all" {
                elasticsearch { 
       hosts => ["http://elasticsearch1:9000" ,"http://elasticsearch2:9001", "http://elasticsearch3:9002"]
       index => "logstash_lghall_all-%{+YYYY.MM.dd}"
   }
  }
    if [@metadata][myid] == "lg_server_all" {
                elasticsearch {
       hosts => ["http://elasticsearch1:9000" ,"http://elasticsearch2:9001", "http://elasticsearch3:9002"]
       index => "logstash_lgserver_all-%{+YYYY.MM.dd}"
   }
  }
    if [@metadata][myid] == "lg_api_all" {
                elasticsearch { 
       hosts => ["http://elasticsearch1:9000" ,"http://elasticsearch2:9001", "http://elasticsearch3:9002"]
       index => "logstash_lgapi_all-%{+YYYY.MM.dd}"
   }   
  }
    if [@metadata][myid] == "lg_schedule_all" {
                elasticsearch {
       hosts => ["http://elasticsearch1:9000" ,"http://elasticsearch2:9001", "http://elasticsearch3:9002"]
       index => "logstash_lgschedule_all-%{+YYYY.MM.dd}"
   }
  }
    if [@metadata][myid] == "lg_manager_all" {
                elasticsearch {
       hosts => ["http://elasticsearch1:9000" ,"http://elasticsearch2:9001", "http://elasticsearch3:9002"]
       index => "logstash_manager_all-%{+YYYY.MM.dd}"
   }   
  }
    if [@metadata][myid] == "lg_cache_all" {
                elasticsearch {
       hosts => ["http://elasticsearch1:9000" ,"http://elasticsearch2:9001", "http://elasticsearch3:9002"]
       index => "logstash_lgcache_all-%{+YYYY.MM.dd}"
   }   
  }
    if [@metadata][myid] == "lc_site_ac" {
      elasticsearch {
         hosts => ["http://elasticsearch1:9000" ,"http://elasticsearch2:9001", "http://elasticsearch3:9002"]
         index => "logstash_lcsite_ac-%{+YYYY.MM.dd}"
   }
 }
    if [@metadata][myid] == "lg_core_access" {
      elasticsearch {
         hosts => ["http://elasticsearch1:9000" ,"http://elasticsearch2:9001", "http://elasticsearch3:9002"]
         index => "logstash_lgcore_ac-%{+YYYY.MM.dd}"
   }   
 } 
    if [@metadata][myid] == "lc_site_error" {
      elasticsearch {
         hosts => ["http://elasticsearch1:9000" ,"http://elasticsearch2:9001", "http://elasticsearch3:9002"]
         index => "logstash_lcsite_er-%{+YYYY.MM.dd}"
   }
 }
    if [@metadata][myid] == "lg_core_error" {
        elasticsearch {
        hosts => ["http://elasticsearch1:9000" ,"http://elasticsearch2:9001", "http://elasticsearch3:9002"]
        index => "logstash_lgcore-er-%{+YYYY.MM.dd}"
   }
 }
}
